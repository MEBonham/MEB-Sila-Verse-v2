import { Reducers, State } from '../default';
import Dispatcher, { ExtractArguments } from '../typings/dispatcher';
import Dispatchers from '../typings/dispatchers';
import Reducer from '../typings/reducer';
import GlobalStateManager from './global-state-manager';
export declare type UseDispatch<G extends {} = State, R extends {} = Reducers, K extends keyof R = keyof R, A extends any[] = any[]> = Dispatcher<G, A> | Dispatcher<G, ExtractArguments<R[K]>> | Dispatchers<G, R>;
export default function useDispatch<G extends {} = State, R extends {} = Reducers>(overrideGlobalStateManager: GlobalStateManager<G, R> | null): Dispatchers<G, R>;
export default function useDispatch<G extends {} = State, R extends {} = Reducers, A extends any[] = any[]>(overrideGlobalStateManager: GlobalStateManager<G, R> | null, reducer: Reducer<G, R, A>): Dispatcher<G, A>;
export default function useDispatch<G extends {} = State, R extends {} = Reducers, K extends keyof R = keyof R>(overrideGlobalStateManager: GlobalStateManager<G, R> | null, reducer: K): Dispatcher<G, ExtractArguments<R[K]>>;
